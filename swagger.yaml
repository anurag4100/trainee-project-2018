swagger: '2.0'
info:
  description: |
    draft design for feature suggestion
  version: 1.0.0
  title: Feature Suggestion
  contact:
    email: pandey.anurag@principal.com

paths:
  /features:
    post:
      tags:
      - post
      summary: Add a new feature
      description: This endpoint can be used to add a new feature.
      operationId: addFeature
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: feature object that needs to be added to the catalogue
        required: true
        schema:
          $ref: '#/definitions/Feature'
      responses:
        400:
          description: Validation error
          schema:
            $ref: '#/definitions/Errors'
        201:
          description: created for the first time
          schema:
            $ref : '#/definitions/Feature'
        200: 
          description: Any subsequent execution after 201
          schema:
            $ref : '#/definitions/Feature'
    get:
      tags:
      - get
      summary: Fetch all features 
      description: These can be filtered by trend, status etc. by providing corresponding
              query parameters. Sort order can be changed using created_desc param.Multiple status values can be provided with comma separated strings
      operationId: findFeaturesByStatus
      produces:
      - application/json
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: false
        type: array
        items:
          type: string
          enum: 
            - NEW
            - REVIEWED_BY_MODERATOR
            - UNDER_CONSIDERATION
            - RELEASED
            - NOT_CURRENTLY_PLANNED
            - EXISTING_FEATURE
            - NEED_MORE_INFO
          default: ALL
      - name: trend
        in: query
        description: Popularity of the feature to be considered for filter
        required: false
        type: array
        items:
          type: string
          enum: 
            - HOT
            - TOP
            - RECENT
          default: ALL
        collectionFormat: multi
      - name: limit
        in: query
        description: How many items to return at one time (max 100)
        required: false
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 10
      - name: created_desc
        in: query
        description: Sort order of the features. Defaulted to ascending order of created_at timestamp. 
        required: false
        default: false
        type: boolean
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Feature'
        400:
          description: validation errors like invalid status value
          schema:
            $ref: '#/definitions/Error'
  /features/{feature_id}:
    get:
      tags:
      - get
      summary: Find a feature by feature_id
      description: Returns a single feature
      operationId: getFeatureById
      produces:
      - application/json
      parameters:
      - name: feature_id
        in: path
        description: ID of feature to return
        required: true
        type: integer
        format: integer32
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Feature'
        400:
          description: Invalid ID supplied
          schema:
            $ref: '#/definitions/Error'
        404:
          description: feature not found
      
    put:
      tags:
      - update
      summary: Updates the feature
      description: This endpoint can be used if the user wishes to edit an existing feature.
      consumes:
      - application/json
      produces:
      - application/plain-text
      parameters:
      - name: feature_id
        in: path
        description: feature_id of the feature that needs to be updated
        required: true
        type: integer
        format: int32
      - name: body
        in: body
        description: Updated object of type feature
        required: true
        schema:
          $ref: '#/definitions/Feature'
      responses:
        400:
          description: Validation error
          schema:
            $ref: '#/definitions/Errors'
        404:
          description: Feature not found
        204: 
          description: Updated successfully
        
    delete:
      tags:
      - delete
      summary: Deletes a feature
      description: This endpoint can be used to delete a feature. Response will be idempotent if operation is performed multiple times
      operationId: deleteFeature
      produces:
      - application/json
      parameters:
      - name: feature_id
        in: path
        description: Feature id to delete
        required: true
        type: integer
        format: integer32
      responses:
        400:
          description: Validation errors
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Feature not found
        204: 
          description: Deleted successfully

  /features/{feature_id}/comments/:
    post:
      tags:
      - post
      summary: Post a new comment
      description: This endpoint can be used to add a new comment on the feature page
      operationId: addComment
      consumes:
      - application/json
      produces:
      - application/json
      parameters: 
        - name: body
          in: body
          required: true
          schema: 
            $ref: '#/definitions/Comment'
            
        - name: feature_id
          in: path
          required: true
      responses:
        400:
          description: Validation error
          schema:
            $ref: '#/definitions/Errors'
        201:
          description: created for the first time
          schema:
            $ref : '#/definitions/Comment'
        200: 
          description: Any subsequent execution after 201
          schema:
            $ref : '#/definitions/Comment'
    get:
      tags:
      - get
      summary:  fetch comments on the feature
      description: retrieves list of comments on the given feature_id
      operationId: getCommentsByFeatureId
      produces:
      - application/json
      parameters:
      - name: feature_id
        in: path
        description: feature_id for which comments needs to be retrieved.
        required: true
        type: integer
        format: integer32
      
      - name: limit
        in: query
        description: How many items to return at one time (max 100)
        required: false
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 10
      
      - name: votes_asc
        in: query
        description: Sort order of the comments. Defaulted to descending order of number of votes on the comment.
        required: false
        default: false
        type: boolean
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Comment'
        400:
          description: Invalid ID supplied
          schema:
            $ref: '#/definitions/Error'
        404:
          description: feature not found
  
  /features/{feature_id}/comments/{comment_id}:
    put:
      tags:
      - update
      summary: Updates a comment
      operationId: updateComment
      description: This endpoint can be used if the user wishes to edit an existing comment. User needs to pass the specific comment id that needs to be updated
      consumes:
      - application/json
      produces:
      - application/plain-text
      parameters:
      - name: comment_id
        in: path
        description: comment_id of the comments that needs to be updated
        required: true
        type: string
        format: alphanumeric
      - name: feature_id
        in: path
        description: feature_id of the feature.
        required: true
        type: integer
        format: int32
      - name: body
        in: body
        description: Updated object of type feature
        required: true
        schema:
          $ref: '#/definitions/Comment'
      responses:
        400:
          description: Validation error
          schema:
            $ref: '#/definitions/Errors'
        404:
          description: Feature not found
        204: 
          description: Updated successfully
    get:
      tags:
      - get
      summary: Find a comment by comment id (Optional)
      description: Returns a single comment
      operationId: getCommentById
      produces:
      - application/json
      parameters:
      - name: feature_id
        in: path
        description: ID of feature to return
        required: true
        type: integer
        format: integer32
      
      - name: comment_id
        in: path
        description: comment_id of the comments that needs to be updated
        required: true
        type: string
        format: alphanumeric
      
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Comment'
        400:
          description: Invalid ID supplied
          schema:
            $ref: '#/definitions/Error'
        404:
          description: feature not found
        
    delete:
      tags:
      - delete
      summary: Deletes a comment
      description: This endpoint can be used to delete a comment. Response will be idempotent if operation is performed multiple times
      operationId: deleteComment
      produces:
      - application/json
      parameters:
      
      - name: feature_id
        in: path
        description: Feature id that comment is linked to 
        required: true
        type: integer
        format: integer32
        
      - name: comment_id
        in: path
        description: comment id that needs to be deleted
        required: true
        type: string
        format: alphanumeric
      
      responses:
        400:
          description: Validation errors
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Feature not found
        204: 
          description: Deleted successfully
  
  /{object_id}/vote/:
    put:
      tags:
      - vote
      summary: upvote any object
      operationId: vote
      description: This endpoint can be used to upvote any object e.g. feature or comment. Although , individual update endpoints can be used to upvote them but i thaught of going through this route so that some additional logic can be accomodated exclusive to upvote functionality. e.g. One user can upvote an object only once.
      consumes:
      - application/json
      produces:
      - application/plain-text
      parameters:
      - name: object_id
        in: path
        description: universal object id 
        required: true
        type: string
        format: alphanumeric
      
      responses:
        400:
          description: Validation error
          schema:
            $ref: '#/definitions/Errors'
        404:
          description: Feature not found
        204: 
          description: Updated successfully  
          
securityDefinitions:
  feat_sugg_auth:
    type: oauth2
    authorizationUrl: https://{env}.{host}/oauth/dialog
    flow: implicit
    scopes:
      write:features: modify features
      read:features: read features
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  
  Feature:
    type: object
    required:
    - object_id
    - feature_id
    - title
    - description
    - author_id
    - author_name
    - created_at
    - status
    - trend
    properties:
      object_id:
        $ref: '#/definitions/Object_Id'
      feature_id:
        type: integer
        format: int32
        example: 1543
        description: A unique numeric feature id to be assigned to every feature
      title:
        type: string
        minLength: 3
        maxLength: 120
        example: super cool idea 1
        description: title of the feature
      description:
        type: string
        minLength: 10
        maxLength: 1000
        example: this will make my retirement planning much easier.
      author_id:
        type: string
        format: alphanumeric
        example: P945059
        description: Id of the author. (can be taken from UserResource object of auth service)
      author_name:
        type: string
        format: alphabetic
        example: Anurag Pandey
        description: Name of the author. ((can be taken from UserResource object of auth service))
      status:
        $ref : '#/definitions/Status'
      votes:
        type : integer
        format: integer64
        example : 14
        description: Number of votes this feature has accumulated.
      created_at: 
        type: string
        format: timestamp
        example: 2018-06-10-23T18:25:43.511Z
        description: when was this feature created
      updated_at:
        type: string
        format: timestamp
        example: 2018-06-10-23T18:25:43.511Z
        description: when was this feature updated
      trend: 
        $ref: '#/definitions/Trend'
  
  Status: 
    type: string
    description: current status of this idea.
    enum: &STATUS
      - NEW
      - REVIEWED_BY_MODERATOR
      - UNDER_CONSIDERATION
      - RELEASED
      - NOT_CURRENTLY_PLANNED
      - EXISTING_FEATURE
      - NEED_MORE_INFO
    
  Trend: 
    type: string
    description: this parameter is decided based on popularity of the idea
    enum: &TREND
      - HOT
      - TOP
      - RECENT
      
  Errors:
    type : object
    properties:
      errors:
        type: array
        description : error object containing all validation errors
        items :
          $ref: '#/definitions/Error'
      messsage :
        type: string
        description : error message
        example: This request contains validation errors. Please review.
  Error:
    type: object
    required: 
      - field
      - issue
      - location
      
    properties:
      field:
        type: string
        description: name of the field which contains validation error
        example: title
      issue: 
        type: string
        description: issue specific error message
        example: title is required
      location :
        type: string
        description: location of the field
        example: body
      value:
        type: string
        description: the value user had provided in the field
  Comment:
    required:
      - object_id
      - comment_id
      - comment
      - author_id
      - author_name
      - feature_id
      - parent_id
      - created_at
    properties:
      object_id: 
        $ref: '#/definitions/Object_Id'
      comment_id: 
        $ref: '#/definitions/Comment_Id'
      comment:
        type: string
        minLength: 10
        description: Actual comment body.
        #need to confirm from business
        maxLength: 1000
        example: I like this feature!!!
      author_id:
        type: string
        description: Id of the author who posted the comment.
        format: alphanumeric
        example: P945059
      author_name: 
        type: string
        description : Name of the author who posted the comment
        example: Anurag Pandey
      feature_id:
        type: integer
        format: integer32
        description: Feature id to which this comment is tied to
        example: 1342
      vote:
        type: integer
        format: integer64
        description: vote count on the comment
        example: 5
      parent_id:
        $ref: '#/definitions/Comment_Id'
        description: This field ties to the comment_id. This will help identify if the comment is reply to any previous comment.
                      this is a foreign key.
      created_at: 
        type: string
        format: timestamp
        example: 2018-06-10-23T18:25:43.511Z
        description: when was the comment posted
      updated_at:
        type: string
        format: timestamp
        example: 2018-06-10-23T18:25:43.511Z  
        description: when was the comment updated. 
        
  Comment_Id:
    type: string
    description: Unique identifier for every comment.This will also act as parent id to any reply to a comment.
    format : alphanumeric
    example: ABDGHAG123BJ
    minLength: 12
    maxLength: 12
  
  Object_Id:
    type: string
    description: This will be a universal identifier for all the objects such as features, comments and attachments etc.
    format : alphanumeric
    example: ABDGHAG123BJGDHTD1234
    minLength: 21
    maxLength: 21    
# host: api.pilot.principal.com
# basePath: /api/v1
schemes:
 - https
 - http
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /onlyanurag/trainee-project/1.0.0